# -*- coding: utf-8 -*-
"""Parkinson_Disease_Random_Forest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xwUvdGzR4h2U-qMLycqoQgylnuMIiQIp

Matrix column entries (attributes):

name - ASCII subject name and recording number

MDVP:Fo(Hz) - Average vocal fundamental frequency

MDVP:Fhi(Hz) - Maximum vocal fundamental frequency

MDVP:Flo(Hz) - Minimum vocal fundamental frequency

MDVP:Jitter(%), MDVP:Jitter(Abs), MDVP:RAP, MDVP:PPQ, Jitter:DDP - Several measures of variation in fundamental frequency

MDVP:Shimmer, MDVP:Shimmer(dB), Shimmer:APQ3, Shimmer:APQ5, MDVP:APQ, Shimmer:DDA - Several measures of variation in amplitude

NHR, HNR - Two measures of ratio of noise to tonal components in the voice status - Health status of the subject (one) - Parkinson's,(zero) - healthy

RPDE, D2 - Two nonlinear dynamical complexity measures

DFA - Signal fractal scaling exponent

spread1,spread2, PPE - Three nonlinear measures of fundamental frequency variation
"""

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.ensemble import RandomForestRegressor

df = pd.read_csv('/content/parkinsons.csv')
df

df.shape

df.describe()

df.info()

df.isnull().sum()

df.corr()

correlation = df.corr()
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')



df.groupby('status').mean()

df = df.drop(columns = ['name'], axis=1)

scaler = StandardScaler()
scaler.fit(df)

scaled_data = scaler.transform(df)
scaled_data

scaled_df = pd.DataFrame(scaled_data)
scaled_df

X = scaled_df.drop([16], axis=1)
y = scaled_df[16]

X

y

pca = PCA(n_components = 2)

pca.fit(X)

pca_data = pca.transform(X)
pca_data

scaled_df.shape

pca_data.shape

pca_data = pd.DataFrame(pca_data)
pca_data

pca_data.describe()

pca_data.isnull().sum()

X_train, X_test, y_train, y_test = train_test_split(pca_data, y, test_size=0.2)

train_data = X_train.join(y_train)

X_train.hist(figsize=(10,6))

plt.figure(figsize=(8,6))
sns.scatterplot(x=0, y=1, data = train_data, hue = 16, palette = 'coolwarm')
plt.title('Dependency figure')
plt.xlabel('Primary Component 1')
plt.ylabel('Primary Component 2')

forest = RandomForestRegressor()
forest.fit(X_train, y_train)

forest.score(X_train, y_train)





